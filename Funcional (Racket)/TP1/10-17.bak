;------------ 10

(define largo (lambda (ls) (if (null? ls) 0 (+ 1 (largo (cdr ls))))))
(largo '(1 4 6 8 3 8))

;------------ 11

(define count (lambda (e ls) (if (null? ls) 0 (if (eq? e (car ls)) (+ 1 (count e (cdr ls))) (count e (cdr ls))))))
(count 3 '(1 2 3 4 5 4 3 2 1 ))

;------------ 12

(define subst (lambda (in out ls) (if (null? ls) ls (if (eq? in (car ls)) (cons out (subst in out (cdr ls))) (cons (car ls) (subst in out (cdr ls)))))))
(subst 'c 'k '( c o c o n u t))

;------------ 13

(define make-list (lambda (e n) (if (= n 0) '() (cons e (make-list e (- n 1))))))
(make-list 'A 5)
(define eliminar (lambda (e ls) (if (null? ls) ls (if (eq? e (car ls)) (eliminar e (cdr ls)) (cons (car ls) (eliminar e (cdr ls)))))))
(define agrupar (lambda (ls) (if (null? ls) ls (cons (make-list (car ls) (count (car ls) ls)) (agrupar (eliminar (car ls) ls))))))
(agrupar '(A A B C A B A D C))

;------------ 14

(define conc (lambda (l1 l2) (if (null? l2) l2 (if (null? l1) (cons (car l2) (conc l1 (cdr l2))) (cons (car l1) (conc (cdr l1) l2))))))
(conc '(1 2 3) '(4 5 6))

;------------ 15

(define firstnumber (lambda (ls) (if (null? ls) "null" (if (number? (car ls)) (car ls) (firstnumber (cdr ls))))))
(firstnumber '((1 . 2) 'a (b) (5) 6 8 'a 9))

;------------ 16 (de dos formas distintas pq no entiendo la consigna xd)

(define attach-at-end (lambda (e ls) (if (null? ls) (list e) (cons (car ls) (attach-at-end e (cdr ls))))))
(define delete-attach (lambda (e ls) (if (null? ls) (list e) (if (eq? e (car ls)) (delete-attach e (cdr ls)) (cons (car ls) (delete-attach e (cdr ls)))))))
(attach-at-end 'prueba '(esto es una))
(delete-attach 'función '(creo que función funciona la))

;------------

